import socket
import threading
from RequestHandler import RequestHandler


class Communicator:

    def __init__(self):
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.request_handler = RequestHandler()
        self.clients_sockets = {}

    def bind_and_listen(self):
        self.server_socket.bind(('127.0.0.1', 4234))
        self.server_socket.listen()

    def start_handle_requests(self):
        self.bind_and_listen()
        while True:
            new_client_socket = self.server_socket.accept()
            client_thread = threading.Thread(target=self.handle_new_clients, args=new_client_socket)
            self.clients_sockets[new_client_socket] = client_thread
            self.clients_sockets[new_client_socket].start()

    def handle_new_clients(self, new_client_socket, address):
        username = ''
        logged_in = False

        while True:

            data = new_client_socket.recv(1024)

            if data.decode().split(',')[0] == 'login':
                response = self.request_handler.login_user(data.decode())
                new_client_socket.sendall(response.encode())
                logged_in = True

                if response == 'ok':
                    username = data.decode().split(',')[1]

            if data.decode().split(',')[0] == 'register':
                response = self.request_handler.register_user(data.decode(), username)
                new_client_socket.sendall(response.encode())

            if data.decode() == 'logout':
                response = self.request_handler.logout(username)
                new_client_socket.sendall(response.encode())
                logged_in = False

            if data.decode() == 'getUserWebsite':
                response = self.request_handler.sqlite_database.get_user_website(username)
                new_client_socket.sendall(response.encode())

            if data.decode() == 'testMyWebsite':
                response = self.request_handler.scan_for_sql_injection(username)
                response += self.request_handler.scan_for_html_injection(username)
                new_client_socket.sendall(response.encode())

            if data.decode() == '':
                new_client_socket.close()
                if logged_in:
                    self.request_handler.logout(username)
                break
