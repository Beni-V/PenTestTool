from BaseInjectionScanner import BaseInjectionScanner
import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
from pprint import pprint


class HtmlInjectionScanner(BaseInjectionScanner):
    def __init__(self):
        super().__init__()

    def is_vulnerable(self, response_soup, html_payload):
        for html_element in response_soup.find_all("img"):
            if str(html_element) == html_payload:
                return True
        return False
    
    def scan_html_injection(self, url):
        html_payload = '<img height="600" src="img_fff.jpg" width="500"/>'
        # add html payload to the URL
        new_url = f"{url}{html_payload}"
        print("[!] Trying", new_url)
        # make the HTTP request
        res = bs(requests.get(url + html_payload).text, "html.parser")
        if self.is_vulnerable(res, html_payload):
            print("[+] HTML Injection vulnerability detected, link:", new_url)
            return True
        # test on HTML forms
        forms = self.get_all_forms(url)
        print(f"[+] Detected {len(forms)} forms on {url}.")
        for form in forms:
            form_details = self.get_form_details(form)
            # the data body we want to submit
            data = {}
            for input_tag in form_details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["value"]:
                    # any input form that is hidden or has some value,
                    # just use it in the form body
                    try:
                        data[input_tag["name"]] = input_tag["value"] + html_payload
                    except:
                        pass
                elif input_tag["type"] != "submit":
                    data[input_tag["name"]] = f"{html_payload}"
            # join the url with the action (form request URL)
            url = urljoin(url, form_details["action"])
            if form_details["method"] == "post":
                res = self.session.post(url, data=data)
            elif form_details["method"] == "get":
                res = self.session.get(url, params=data)
            # test whether the resulting page is vulnerable
            if self.is_vulnerable(bs(res.text, 'html.parser'), html_payload):
                print("[+] HTML Injection vulnerability detected, link:", url)
                print("[+] Form:")
                pprint(form_details)
                return True
        return False
